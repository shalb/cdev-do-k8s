{{- $get_kubeconfig_cmd := print "export KUBECONFIG=./kubeconfig && doctl auth init -t"  (reqEnv "DIGITALOCEAN_TOKEN") " && doctl kubernetes cluster kubeconfig save " .name }}
name: do-k8s
kind: StackTemplate
units:
  - 
    name: vpc
    type: tfmodule
    source: github.com/shalb/terraform-do-vpc?ref=tf14
    inputs:
      name: {{ .variables.cluster_name }}
      region: {{ .variables.region }}
      vpc_id: {{ .variables.vpc }}
  - 
    name: k8s
    type: tfmodule
    source: github.com/shalb/terraform-do-k8s?ref=tfver
    inputs:
      cluster_name: {{ .variables.cluster_name }}
      region: {{ .variables.region }}
      vpc_id: {{ remoteState "this.vpc.vpc_id" }}
      k8s_version: {{ .variables.k8s_version }}
      kubeconfig_bucket: {{ .variables.bucket }}
      default_node_group: {{ insertYAML .variables.main_node_group }}
      {{ if .variables.additional_node_groups }}additional_node_groups: {{  .variables.additional_node_groups | insertYAML }} {{ end }}
  -
    name: kubeconfig
    type: shell
    force_apply: true
    depends_on: this.k8s
    apply:
      commands:
        - export KUBECONFIG="/tmp/kubeconfig_{{ .variables.cluster_name }}" && doctl auth init -t "{{ reqEnv "DIGITALOCEAN_TOKEN" }}" 
        - doctl kubernetes cluster kubeconfig save --verbose {{ .variables.cluster_name }}
        - echo "kubeconfig_base64=$(cat /tmp/kubeconfig_{{ .variables.cluster_name }} | base64 -w 0)"
        - echo "kubeconfig_path=/tmp/kubeconfig_{{ .variables.cluster_name }}"
    outputs:
      type: separator
      separator: "="
  - 
    name: cert-manager
    type: helm
    source:
      repository: "https://charts.jetstack.io"
      chart: "cert-manager"
      version: "v1.6.1"
    kubeconfig: {{ output "this.kubeconfig.kubeconfig_path" }}
    additional_options:
      namespace: "cert-manager"
      create_namespace: true
    inputs:
      installCRDs: true
      webhook.enabled: false
      ingressShim.defaultIssuerName: letsencrypt-prod
      ingressShim.defaultIssuerKind: ClusterIssuer
      ingressShim.defaultACMEChallengeType: dns01
      securityContext.enabled: false
      serviceAccount.create: true
  - 
    name: cert-manager-issuer
    type: k8s-manifest
    path: ./cert-manager/
    kubeconfig: {{ output "this.kubeconfig.kubeconfig_path" }}
    depends_on: this.cert-manager
  -
    name: argocd
    type: helm
    source:
      repository: "https://argoproj.github.io/argo-helm"
      chart: "argo-cd"
      version: "3.29.5"
    kubeconfig: {{ output "this.kubeconfig.kubeconfig_path" }}
    depends_on: this.cert-manager-issuer
    additional_options:
      namespace: "argocd"
      create_namespace: true
    inputs:
      service.type: LoadBalancer
      server.certificate.domain: argocd.{{ .variables.domain }}
      server.certificate.enabled: true
      server.certificate.issuer.name: letsencrypt-prod
      server.certificate.issuer.kind: ClusterIssuer
      server.ingress.enabled: true
      server.ingress.hosts[0]: argocd.{{ .variables.domain }}
      server.ingress.tls[0].hosts[0]: argocd.{{ .variables.domain }}
      server.ingress.tls[0].secretName: argocd-secret
      server.ingress.annotations.cert-manager\.io/cluster-issuer: letsencrypt-prod
      server.ingress.annotations.kubernetes\.io/ingress.class: nginx
      server.ingress.annotations.kubernetes\.io/tls-acme: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-passthrough: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/backend-protocol: "HTTPS"
      server.config.url: https://argocd.{{ .variables.domain }}
      configs.secret.argocdServerAdminPassword: {{ .variables.argo_password }}
      configs.secret.argocdServerAdminPasswordMtime: "2021-01-01T00:00:00Z"
  - 
    name: argocd_apps
    type: k8s-manifest
    path: ./argocd/
    kubeconfig: {{ output "this.kubeconfig.kubeconfig_path" }}
    depends_on: this.argocd
  - 
    name: print_outputs
    type: printer
    depends_on: this.argocd
    inputs:
      cluster_name: {{ .variables.cluster_name }}
      region: {{ .variables.region }}
      kubeconfig: {{ output "this.kubeconfig.kubeconfig_path" }}
      argocd_url: https://argocd.{{ .variables.domain }}

